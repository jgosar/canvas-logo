module.exports = {
  ignorePatterns: ['*.html'],
  env: {
      browser: true,
      es6: true,
  },
  extends: ['prettier'],
  parser: '@typescript-eslint/parser',
  parserOptions: {
      project: './tsconfig.json',
      tsconfigRootDir: __dirname,
      sourceType: 'module',
      createDefaultProgram: true,
  },
  plugins: [
      '@angular-eslint/eslint-plugin',
      'eslint-plugin-prefer-arrow',
      'eslint-plugin-rxjs',
      '@typescript-eslint',
  ],
  rules: {
      '@angular-eslint/component-class-suffix': [
          'error',
          {
              suffixes: ['Component', 'View'],
          },
      ],
      '@angular-eslint/component-selector': [
          'error',
          {
              type: 'element',
              prefix: 'cl',
              style: 'kebab-case',
          },
      ],
      '@angular-eslint/directive-class-suffix': [
          'error',
          {
              suffixes: ['Directive', 'Component'],
          },
      ],
      '@angular-eslint/directive-selector': [
          'error',
          {
              type: 'attribute',
              prefix: 'cl',
              style: 'camelCase',
          },
      ],
      '@angular-eslint/no-output-rename': 'error',
      '@angular-eslint/use-lifecycle-interface': 'error',
      '@angular-eslint/use-pipe-transform-interface': 'error',
      '@typescript-eslint/consistent-type-definitions': 'error',
      '@typescript-eslint/dot-notation': 'error',
      '@typescript-eslint/explicit-member-accessibility': [
          'error',
          {
              accessibility: 'no-public',
          },
      ],
      '@typescript-eslint/member-ordering': 'off',
      '@typescript-eslint/naming-convention': [
          'warn',
          {selector: 'default', format: ['camelCase']},
          {selector: 'variable', format: ['camelCase', 'UPPER_CASE']},
          {selector: 'typeLike', format: ['UPPER_CASE', 'PascalCase']},
          {selector: 'enumMember', format: ['UPPER_CASE']},
          /*{
              selector: 'classProperty',
              format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
          },*/
      ],
      '@typescript-eslint/no-empty-function': 'off',
      '@typescript-eslint/no-empty-interface': 'error',
      '@typescript-eslint/no-for-in-array': 'error',
      '@typescript-eslint/no-misused-new': 'error',
      '@typescript-eslint/no-namespace': 'error',
      '@typescript-eslint/no-unused-expressions': 'warn',
      '@typescript-eslint/no-var-requires': 'warn',
      '@typescript-eslint/prefer-for-of': 'warn',
      '@typescript-eslint/prefer-function-type': 'error',
      '@typescript-eslint/prefer-namespace-keyword': 'error',
      '@typescript-eslint/restrict-plus-operands': 'warn',
      '@typescript-eslint/triple-slash-reference': 'error',
      '@typescript-eslint/unified-signatures': 'error',
      '@typescript-eslint/consistent-type-imports': 'warn',
      'arrow-body-style': 'warn',
      complexity: [
          'error',
          {
              max: 12,
          },
      ],
      'constructor-super': 'error',
      curly: 'warn',
      'dot-notation': 'error',
      'eol-last': 'error',
      eqeqeq: ['error', 'smart'],
      'guard-for-in': 'error',
      'id-blacklist': 'error',
      'id-match': 'error',
      'linebreak-style': ['error', 'unix'],
      'max-classes-per-file': ['error', 2],
      'max-len': 'off',
      'new-parens': 'error',
      'no-bitwise': 'error',
      'no-caller': 'error',
      'no-cond-assign': 'error',
      'no-console': 'error',
      'no-constant-condition': 'error',
      'no-debugger': 'error',
      'no-empty': 'off',
      'no-empty-function': 'off',
      'no-eval': 'error',
      'no-fallthrough': 'error',
      'no-invalid-regexp': 'error',
      'no-irregular-whitespace': 'error',
      'no-new-wrappers': 'error',
      'no-redeclare': 'error',
      'no-regex-spaces': 'error',
      'no-sparse-arrays': 'error',
      'no-template-curly-in-string': 'warn',
      'no-throw-literal': 'warn',
      'no-trailing-spaces': 'error',
      'no-undef-init': 'warn',
      'no-underscore-dangle': 'error',
      'no-unsafe-finally': 'error',
      'no-unused-expressions': 'warn',
      'no-unused-labels': 'error',
      'no-var': 'warn',
      'prefer-arrow/prefer-arrow-functions': 'off',
      'prefer-const': 'warn',
      'prefer-object-spread': 'warn',
      radix: 'warn',
      'rxjs/no-unsafe-takeuntil': 'error',
      'spaced-comment': [
          'warn',
          'always',
          {
              markers: ['/'],
          },
      ],
      'use-isnan': 'error',
  },
};
